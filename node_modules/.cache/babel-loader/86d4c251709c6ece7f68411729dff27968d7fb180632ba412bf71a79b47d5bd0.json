{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.url = void 0;\nconst parseuri = require(\"parseuri\");\nconst debug = require(\"debug\")(\"socket.io-client:url\");\n/**\n * URL parser.\n *\n * @param uri - url\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nfunction url(uri, loc) {\n  let obj = uri;\n  // default to window.location\n  loc = loc || typeof location !== \"undefined\" && location;\n  if (null == uri) uri = loc.protocol + \"//\" + loc.host;\n  // relative path support\n  if (typeof uri === \"string\") {\n    if (\"/\" === uri.charAt(0)) {\n      if (\"/\" === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      debug(\"protocol-less url %s\", uri);\n      if (\"undefined\" !== typeof loc) {\n        uri = loc.protocol + \"//\" + uri;\n      } else {\n        uri = \"https://\" + uri;\n      }\n    }\n    // parse\n    debug(\"parse %s\", uri);\n    obj = parseuri(uri);\n  }\n  // make sure we treat `localhost:80` and `localhost` equally\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = \"80\";\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = \"443\";\n    }\n  }\n  obj.path = obj.path || \"/\";\n  const ipv6 = obj.host.indexOf(\":\") !== -1;\n  const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n  // define unique id\n  obj.id = obj.protocol + \"://\" + host + \":\" + obj.port;\n  // define href\n  obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n  return obj;\n}\nexports.url = url;","map":{"version":3,"names":["Object","defineProperty","exports","value","url","parseuri","require","debug","uri","loc","obj","location","protocol","host","charAt","test","port","path","ipv6","indexOf","id","href"],"sources":["E:/do an tot nghiep/website DATN/client/node_modules/socket.io-client/build/url.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.url = void 0;\nconst parseuri = require(\"parseuri\");\nconst debug = require(\"debug\")(\"socket.io-client:url\");\n/**\n * URL parser.\n *\n * @param uri - url\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nfunction url(uri, loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            debug(\"protocol-less url %s\", uri);\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        debug(\"parse %s\", uri);\n        obj = parseuri(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\nexports.url = url;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,GAAG,GAAG,KAAK,CAAC;AACpB,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC,CAAC,sBAAsB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,GAAGA,CAACI,GAAG,EAAEC,GAAG,EAAE;EACnB,IAAIC,GAAG,GAAGF,GAAG;EACb;EACAC,GAAG,GAAGA,GAAG,IAAK,OAAOE,QAAQ,KAAK,WAAW,IAAIA,QAAS;EAC1D,IAAI,IAAI,IAAIH,GAAG,EACXA,GAAG,GAAGC,GAAG,CAACG,QAAQ,GAAG,IAAI,GAAGH,GAAG,CAACI,IAAI;EACxC;EACA,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;IACzB,IAAI,GAAG,KAAKA,GAAG,CAACM,MAAM,CAAC,CAAC,CAAC,EAAE;MACvB,IAAI,GAAG,KAAKN,GAAG,CAACM,MAAM,CAAC,CAAC,CAAC,EAAE;QACvBN,GAAG,GAAGC,GAAG,CAACG,QAAQ,GAAGJ,GAAG;MAC5B,CAAC,MACI;QACDA,GAAG,GAAGC,GAAG,CAACI,IAAI,GAAGL,GAAG;MACxB;IACJ;IACA,IAAI,CAAC,qBAAqB,CAACO,IAAI,CAACP,GAAG,CAAC,EAAE;MAClCD,KAAK,CAAC,sBAAsB,EAAEC,GAAG,CAAC;MAClC,IAAI,WAAW,KAAK,OAAOC,GAAG,EAAE;QAC5BD,GAAG,GAAGC,GAAG,CAACG,QAAQ,GAAG,IAAI,GAAGJ,GAAG;MACnC,CAAC,MACI;QACDA,GAAG,GAAG,UAAU,GAAGA,GAAG;MAC1B;IACJ;IACA;IACAD,KAAK,CAAC,UAAU,EAAEC,GAAG,CAAC;IACtBE,GAAG,GAAGL,QAAQ,CAACG,GAAG,CAAC;EACvB;EACA;EACA,IAAI,CAACE,GAAG,CAACM,IAAI,EAAE;IACX,IAAI,aAAa,CAACD,IAAI,CAACL,GAAG,CAACE,QAAQ,CAAC,EAAE;MAClCF,GAAG,CAACM,IAAI,GAAG,IAAI;IACnB,CAAC,MACI,IAAI,cAAc,CAACD,IAAI,CAACL,GAAG,CAACE,QAAQ,CAAC,EAAE;MACxCF,GAAG,CAACM,IAAI,GAAG,KAAK;IACpB;EACJ;EACAN,GAAG,CAACO,IAAI,GAAGP,GAAG,CAACO,IAAI,IAAI,GAAG;EAC1B,MAAMC,IAAI,GAAGR,GAAG,CAACG,IAAI,CAACM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACzC,MAAMN,IAAI,GAAGK,IAAI,GAAG,GAAG,GAAGR,GAAG,CAACG,IAAI,GAAG,GAAG,GAAGH,GAAG,CAACG,IAAI;EACnD;EACAH,GAAG,CAACU,EAAE,GAAGV,GAAG,CAACE,QAAQ,GAAG,KAAK,GAAGC,IAAI,GAAG,GAAG,GAAGH,GAAG,CAACM,IAAI;EACrD;EACAN,GAAG,CAACW,IAAI,GACJX,GAAG,CAACE,QAAQ,GACR,KAAK,GACLC,IAAI,IACHJ,GAAG,IAAIA,GAAG,CAACO,IAAI,KAAKN,GAAG,CAACM,IAAI,GAAG,EAAE,GAAG,GAAG,GAAGN,GAAG,CAACM,IAAI,CAAC;EAC5D,OAAON,GAAG;AACd;AACAR,OAAO,CAACE,GAAG,GAAGA,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}