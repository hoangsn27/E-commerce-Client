{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\nvar eio = require(\"engine.io-client\");\nvar socket_1 = require(\"./socket\");\nvar Emitter = require(\"component-emitter\");\nvar parser = require(\"socket.io-parser\");\nvar on_1 = require(\"./on\");\nvar Backoff = require(\"backo2\");\nvar debug = require(\"debug\")(\"socket.io-client:manager\");\nvar Manager = /*#__PURE__*/function (_Emitter) {\n  _inherits(Manager, _Emitter);\n  var _super = _createSuper(Manager);\n  function Manager(uri, opts) {\n    var _this;\n    _classCallCheck(this, Manager);\n    _this = _super.call(this);\n    _this.nsps = {};\n    _this.subs = [];\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    _this.opts = opts;\n    _this.reconnection(opts.reconnection !== false);\n    _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    _this.randomizationFactor(opts.randomizationFactor || 0.5);\n    _this.backoff = new Backoff({\n      min: _this.reconnectionDelay(),\n      max: _this.reconnectionDelayMax(),\n      jitter: _this.randomizationFactor()\n    });\n    _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    _this._readyState = \"closed\";\n    _this.uri = uri;\n    var _parser = opts.parser || parser;\n    _this.encoder = new _parser.Encoder();\n    _this.decoder = new _parser.Decoder();\n    _this._autoConnect = opts.autoConnect !== false;\n    if (_this._autoConnect) _this.open();\n    return _this;\n  }\n  _createClass(Manager, [{\n    key: \"reconnection\",\n    value: function reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionAttempts\",\n    value: function reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelay\",\n    value: function reconnectionDelay(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n  }, {\n    key: \"randomizationFactor\",\n    value: function randomizationFactor(v) {\n      var _a;\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelayMax\",\n    value: function reconnectionDelayMax(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n  }, {\n    key: \"timeout\",\n    value: function timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n  }, {\n    key: \"maybeReconnectOnOpen\",\n    value: function maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"open\",\n    value: function open(fn) {\n      var _this2 = this;\n      debug(\"readyState %s\", this._readyState);\n      if (~this._readyState.indexOf(\"open\")) return this;\n      debug(\"opening %s\", this.uri);\n      this.engine = eio(this.uri, this.opts);\n      var socket = this.engine;\n      var self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false;\n      // emit `open`\n      var openSubDestroy = on_1.on(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      });\n      // emit `error`\n      var errorSub = on_1.on(socket, \"error\", function (err) {\n        debug(\"error\");\n        self.cleanup();\n        self._readyState = \"closed\";\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", _this2).call(_this2, \"error\", err);\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          self.maybeReconnectOnOpen();\n        }\n      });\n      if (false !== this._timeout) {\n        var timeout = this._timeout;\n        debug(\"connect attempt will timeout after %d\", timeout);\n        if (timeout === 0) {\n          openSubDestroy(); // prevents a race condition with the 'open' event\n        }\n        // set timer\n        var timer = setTimeout(function () {\n          debug(\"connect attempt timed out after %d\", timeout);\n          openSubDestroy();\n          socket.close();\n          socket.emit(\"error\", new Error(\"timeout\"));\n        }, timeout);\n        this.subs.push(function subDestroy() {\n          clearTimeout(timer);\n        });\n      }\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"connect\",\n    value: function connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      debug(\"open\");\n      // clear old subs\n      this.cleanup();\n      // mark as open\n      this._readyState = \"open\";\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"open\");\n      // add new subs\n      var socket = this.engine;\n      this.subs.push(on_1.on(socket, \"ping\", this.onping.bind(this)), on_1.on(socket, \"data\", this.ondata.bind(this)), on_1.on(socket, \"error\", this.onerror.bind(this)), on_1.on(socket, \"close\", this.onclose.bind(this)), on_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n  }, {\n    key: \"onping\",\n    value: function onping() {\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondata\",\n    value: function ondata(data) {\n      this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondecoded\",\n    value: function ondecoded(packet) {\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      debug(\"error\", err);\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n  }, {\n    key: \"socket\",\n    value: function socket(nsp, opts) {\n      var socket = this.nsps[nsp];\n      if (!socket) {\n        socket = new socket_1.Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      }\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(socket) {\n      var nsps = Object.keys(this.nsps);\n      for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {\n        var nsp = _nsps[_i];\n        var _socket = this.nsps[nsp];\n        if (_socket.active) {\n          debug(\"socket %s is still active, skipping close\", nsp);\n          return;\n        }\n      }\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"_packet\",\n    value: function _packet(packet) {\n      debug(\"writing packet %j\", packet);\n      if (packet.query && packet.type === 0) packet.nsp += \"?\" + packet.query;\n      var encodedPackets = this.encoder.encode(packet);\n      for (var i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      debug(\"cleanup\");\n      this.subs.forEach(function (subDestroy) {\n        return subDestroy();\n      });\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      debug(\"disconnect\");\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      if (\"opening\" === this._readyState) {\n        // `onclose` will not fire because\n        // an open event never happened\n        this.cleanup();\n      }\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      if (this.engine) this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      debug(\"onclose\");\n      this.cleanup();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"close\", reason);\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this3 = this;\n      if (this._reconnecting || this.skipReconnect) return this;\n      var self = this;\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        debug(\"reconnect failed\");\n        this.backoff.reset();\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        var delay = this.backoff.duration();\n        debug(\"will wait %dms before reconnect attempt\", delay);\n        this._reconnecting = true;\n        var timer = setTimeout(function () {\n          if (self.skipReconnect) return;\n          debug(\"attempting reconnect\");\n          _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_attempt\", self.backoff.attempts);\n          // check again for the case socket closed in above events\n          if (self.skipReconnect) return;\n          self.open(function (err) {\n            if (err) {\n              debug(\"reconnect attempt error\");\n              self._reconnecting = false;\n              self.reconnect();\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_error\", err);\n            } else {\n              debug(\"reconnect success\");\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        this.subs.push(function subDestroy() {\n          clearTimeout(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n  }, {\n    key: \"onreconnect\",\n    value: function onreconnect() {\n      var attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect\", attempt);\n    }\n  }]);\n  return Manager;\n}(Emitter);\nexports.Manager = Manager;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_get","_getPrototypeOf","_inherits","_createSuper","Object","defineProperty","exports","value","Manager","eio","socket_1","Emitter","parser","on_1","Backoff","debug","_Emitter","_super","uri","opts","_this","call","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","key","v","arguments","length","_reconnection","_reconnectionAttempts","_a","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","_reconnecting","attempts","reconnect","fn","_this2","indexOf","engine","socket","self","skipReconnect","openSubDestroy","on","onopen","errorSub","err","cleanup","prototype","timer","setTimeout","close","emit","Error","push","subDestroy","clearTimeout","connect","onping","bind","ondata","onerror","onclose","ondecoded","data","add","packet","nsp","Socket","_destroy","keys","_i","_nsps","active","_close","_packet","query","type","encodedPackets","encode","i","write","options","forEach","destroy","reset","disconnect","reason","_this3","delay","duration","onreconnect","attempt"],"sources":["E:/do an tot nghiep/push github asm3/client/node_modules/socket.io-client/build/manager.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Manager = void 0;\nconst eio = require(\"engine.io-client\");\nconst socket_1 = require(\"./socket\");\nconst Emitter = require(\"component-emitter\");\nconst parser = require(\"socket.io-parser\");\nconst on_1 = require(\"./on\");\nconst Backoff = require(\"backo2\");\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\nclass Manager extends Emitter {\n    constructor(uri, opts) {\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor(opts.randomizationFactor || 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        debug(\"readyState %s\", this._readyState);\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        debug(\"opening %s\", this.uri);\n        this.engine = eio(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on_1.on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on_1.on(socket, \"error\", (err) => {\n            debug(\"error\");\n            self.cleanup();\n            self._readyState = \"closed\";\n            super.emit(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            debug(\"connect attempt will timeout after %d\", timeout);\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = setTimeout(() => {\n                debug(\"connect attempt timed out after %d\", timeout);\n                openSubDestroy();\n                socket.close();\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"open\");\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        super.emit(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on_1.on(socket, \"ping\", this.onping.bind(this)), on_1.on(socket, \"data\", this.ondata.bind(this)), on_1.on(socket, \"error\", this.onerror.bind(this)), on_1.on(socket, \"close\", this.onclose.bind(this)), on_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        super.emit(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        super.emit(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        debug(\"error\", err);\n        super.emit(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new socket_1.Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                debug(\"socket %s is still active, skipping close\", nsp);\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        debug(\"writing packet %j\", packet);\n        if (packet.query && packet.type === 0)\n            packet.nsp += \"?\" + packet.query;\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        debug(\"cleanup\");\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        debug(\"disconnect\");\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        if (\"opening\" === this._readyState) {\n            // `onclose` will not fire because\n            // an open event never happened\n            this.cleanup();\n        }\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason) {\n        debug(\"onclose\");\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        super.emit(\"close\", reason);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            debug(\"reconnect failed\");\n            this.backoff.reset();\n            super.emit(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            debug(\"will wait %dms before reconnect attempt\", delay);\n            this._reconnecting = true;\n            const timer = setTimeout(() => {\n                if (self.skipReconnect)\n                    return;\n                debug(\"attempting reconnect\");\n                super.emit(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        debug(\"reconnect attempt error\");\n                        self._reconnecting = false;\n                        self.reconnect();\n                        super.emit(\"reconnect_error\", err);\n                    }\n                    else {\n                        debug(\"reconnect success\");\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        super.emit(\"reconnect\", attempt);\n    }\n}\nexports.Manager = Manager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}