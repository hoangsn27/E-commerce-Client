{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\nvar socket_io_parser_1 = require(\"socket.io-parser\");\nvar Emitter = require(\"component-emitter\");\nvar on_1 = require(\"./on\");\nvar debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n  var _super = _createSuper(Socket);\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n    _this.ids = 0;\n    _this.acks = {};\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.connected = false;\n    _this.disconnected = true;\n    _this.flags = {};\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n  _createClass(Socket, [{\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on_1.on(io, \"open\", this.onopen.bind(this)), on_1.on(io, \"packet\", this.onpacket.bind(this)), on_1.on(io, \"error\", this.onerror.bind(this)), on_1.on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for connect()\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @param ev - event name\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      args.unshift(ev);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        debug(\"emitting packet with ack id %d\", this.ids);\n        this.acks[this.ids] = args.pop();\n        packet.id = this.ids++;\n      }\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n      if (discardPacket) {\n        debug(\"discard packet as the transport is not currently writable\");\n      } else if (this.connected) {\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this2 = this;\n      debug(\"transport is open - connecting\");\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this2.packet({\n            type: socket_io_parser_1.PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      debug(\"close (%s)\", reason);\n      this.connected = false;\n      this.disconnected = true;\n      delete this.id;\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case socket_io_parser_1.PacketType.EVENT:\n          this.onevent(packet);\n          break;\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case socket_io_parser_1.PacketType.ACK:\n          this.onack(packet);\n          break;\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case socket_io_parser_1.PacketType.CONNECT_ERROR:\n          var err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n        var _iterator = _createForOfIteratorHelper(listeners),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        debug(\"sending ack %j\", args);\n        self.packet({\n          type: socket_io_parser_1.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n      if (\"function\" === typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      debug(\"socket connected with id %s\", id);\n      this.id = id;\n      this.connected = true;\n      this.disconnected = false;\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect\");\n      this.emitBuffered();\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this3 = this;\n      this.receiveBuffer.forEach(function (args) {\n        return _this3.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        return _this3.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        debug(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n  }]);\n  return Socket;\n}(Emitter);\nexports.Socket = Socket;","map":{"version":3,"names":["_createForOfIteratorHelper","require","default","_classCallCheck","_createClass","_get","_getPrototypeOf","_inherits","_createSuper","Object","defineProperty","exports","value","Socket","socket_io_parser_1","Emitter","on_1","debug","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","_Emitter","_super","io","nsp","opts","_this","call","receiveBuffer","sendBuffer","ids","acks","flags","connected","disconnected","auth","_autoConnect","open","key","subEvents","subs","on","onopen","bind","onpacket","onerror","onclose","get","_readyState","send","_len","arguments","length","args","Array","_key","unshift","emit","apply","ev","hasOwnProperty","Error","_len2","_key2","packet","type","PacketType","EVENT","data","options","compress","pop","id","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","_packet","_this2","CONNECT","err","prototype","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","message","ack","emitEvent","_anyListeners","listeners","slice","_iterator","_step","s","n","done","listener","e","f","self","sent","_len3","_key3","emitBuffered","_this3","forEach","destroy","subDestroy","undefined","close","onAny","prependAny","offAny","i","splice","listenersAny"],"sources":["E:/do an tot nghiep/push github asm3/client/node_modules/socket.io-client/build/socket.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst Emitter = require(\"component-emitter\");\nconst on_1 = require(\"./on\");\nconst debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nclass Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        this.ids = 0;\n        this.acks = {};\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.connected = false;\n        this.disconnected = true;\n        this.flags = {};\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_1.on(io, \"open\", this.onopen.bind(this)),\n            on_1.on(io, \"packet\", this.onpacket.bind(this)),\n            on_1.on(io, \"error\", this.onerror.bind(this)),\n            on_1.on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @param ev - event name\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            debug(\"emitting packet with ack id %d\", this.ids);\n            this.acks[this.ids] = args.pop();\n            packet.id = this.ids++;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            super.emit(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        super.emit(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    super.emit(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                super.emit(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        super.emit(\"connect\");\n        this.emitBuffered();\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\nexports.Socket = Socket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}