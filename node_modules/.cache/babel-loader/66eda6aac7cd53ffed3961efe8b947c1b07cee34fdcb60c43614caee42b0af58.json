{"ast":null,"code":"\"use strict\";\n\nvar _get = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"E:/do an tot nghiep/push github asm3/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\nvar Emitter = require(\"component-emitter\");\nvar binary_1 = require(\"./binary\");\nvar is_binary_1 = require(\"./is-binary\");\nvar debug = require(\"debug\")(\"socket.io-parser\");\n/**\n * Protocol version.\n *\n * @public\n */\nexports.protocol = 5;\nvar PacketType;\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nvar Encoder = /*#__PURE__*/function () {\n  function Encoder() {\n    _classCallCheck(this, Encoder);\n  }\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value:\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    function encode(obj) {\n      debug(\"encoding packet %j\", obj);\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if (is_binary_1.hasBinary(obj)) {\n          obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n          return this.encodeAsBinary(obj);\n        }\n      }\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n  }, {\n    key: \"encodeAsString\",\n    value: function encodeAsString(obj) {\n      // first is type\n      var str = \"\" + obj.type;\n      // attachments if we have them\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      }\n      // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      }\n      // immediately followed by the id\n      if (null != obj.id) {\n        str += obj.id;\n      }\n      // json data\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data);\n      }\n      debug(\"encoded %j as %s\", obj, str);\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n  }, {\n    key: \"encodeAsBinary\",\n    value: function encodeAsBinary(obj) {\n      var deconstruction = binary_1.deconstructPacket(obj);\n      var pack = this.encodeAsString(deconstruction.packet);\n      var buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n      return buffers; // write all the buffers\n    }\n  }]);\n  return Encoder;\n}();\nexports.Encoder = Encoder;\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nvar Decoder = /*#__PURE__*/function (_Emitter) {\n  _inherits(Decoder, _Emitter);\n  var _super = _createSuper(Decoder);\n  function Decoder() {\n    _classCallCheck(this, Decoder);\n    return _super.call(this);\n  }\n  /**\n   * Decodes an encoded packet string into packet JSON.\n   *\n   * @param {String} obj - encoded packet\n   */\n  _createClass(Decoder, [{\n    key: \"add\",\n    value: function add(obj) {\n      var packet;\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n        packet = this.decodeString(obj);\n        if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet);\n          // no attachments, labeled binary but no binary data to follow\n          if (packet.attachments === 0) {\n            _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n        }\n      } else if (is_binary_1.isBinary(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n            _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n  }, {\n    key: \"decodeString\",\n    value: function decodeString(str) {\n      var i = 0;\n      // look up type\n      var p = {\n        type: Number(str.charAt(0))\n      };\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      }\n      // look up attachments if type binary\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        var start = i + 1;\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n        var buf = str.substring(start, i);\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n        p.attachments = Number(buf);\n      }\n      // look up namespace (if any)\n      if (\"/\" === str.charAt(i + 1)) {\n        var _start = i + 1;\n        while (++i) {\n          var c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n        p.nsp = str.substring(_start, i);\n      } else {\n        p.nsp = \"/\";\n      }\n      // look up id\n      var next = str.charAt(i + 1);\n      if (\"\" !== next && Number(next) == next) {\n        var _start2 = i + 1;\n        while (++i) {\n          var _c = str.charAt(i);\n          if (null == _c || Number(_c) != _c) {\n            --i;\n            break;\n          }\n          if (i === str.length) break;\n        }\n        p.id = Number(str.substring(_start2, i + 1));\n      }\n      // look up json data\n      if (str.charAt(++i)) {\n        var payload = tryParse(str.substr(i));\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n      debug(\"decoded %s as %j\", str, p);\n      return p;\n    }\n  }, {\n    key: \"destroy\",\n    value:\n    /**\n     * Deallocates a parser's resources\n     */\n    function destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n      }\n    }\n  }], [{\n    key: \"isPayloadValid\",\n    value: function isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return typeof payload === \"object\";\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || typeof payload === \"object\";\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && payload.length > 0;\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n  }]);\n  return Decoder;\n}(Emitter);\nexports.Decoder = Decoder;\nfunction tryParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nvar BinaryReconstructor = /*#__PURE__*/function () {\n  function BinaryReconstructor(packet) {\n    _classCallCheck(this, BinaryReconstructor);\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\n   * Method to be called when binary data received from connection\n   * after a BINARY_EVENT packet.\n   *\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n   * @return {null | Object} returns null if more binary data is expected or\n   *   a reconstructed packet object if all buffers have been received.\n   */\n  _createClass(BinaryReconstructor, [{\n    key: \"takeBinaryData\",\n    value: function takeBinaryData(binData) {\n      this.buffers.push(binData);\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        var packet = binary_1.reconstructPacket(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n  }, {\n    key: \"finishedReconstruction\",\n    value: function finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }]);\n  return BinaryReconstructor;\n}();","map":{"version":3,"names":["_get","require","default","_getPrototypeOf","_inherits","_createSuper","_classCallCheck","_createClass","Object","defineProperty","exports","value","Decoder","Encoder","PacketType","protocol","Emitter","binary_1","is_binary_1","debug","key","encode","obj","type","EVENT","ACK","hasBinary","BINARY_EVENT","BINARY_ACK","encodeAsBinary","encodeAsString","str","attachments","nsp","id","data","JSON","stringify","deconstruction","deconstructPacket","pack","packet","buffers","unshift","_Emitter","_super","call","add","reconstructor","Error","decodeString","BinaryReconstructor","prototype","isBinary","base64","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","destroy","finishedReconstruction","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","parse","e","reconPack","binData","push","reconstructPacket"],"sources":["E:/do an tot nghiep/push github asm3/client/node_modules/socket.io-parser/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\nconst Emitter = require(\"component-emitter\");\nconst binary_1 = require(\"./binary\");\nconst is_binary_1 = require(\"./is-binary\");\nconst debug = require(\"debug\")(\"socket.io-parser\");\n/**\n * Protocol version.\n *\n * @public\n */\nexports.protocol = 5;\nvar PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nclass Encoder {\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        debug(\"encoding packet %j\", obj);\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (is_binary_1.hasBinary(obj)) {\n                obj.type =\n                    obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK;\n                return this.encodeAsBinary(obj);\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data);\n        }\n        debug(\"encoded %j as %s\", obj, str);\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = binary_1.deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\nexports.Encoder = Encoder;\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nclass Decoder extends Emitter {\n    constructor() {\n        super();\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            if (packet.type === PacketType.BINARY_EVENT ||\n                packet.type === PacketType.BINARY_ACK) {\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emit(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emit(\"decoded\", packet);\n            }\n        }\n        else if (is_binary_1.isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emit(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        debug(\"decoded %s as %j\", str, p);\n        return p;\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n        }\n    }\n}\nexports.Decoder = Decoder;\nfunction tryParse(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = binary_1.reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}