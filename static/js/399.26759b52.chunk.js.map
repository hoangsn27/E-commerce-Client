{"version":3,"file":"static/js/399.26759b52.chunk.js","mappings":"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","sources":["API/CartAPI.jsx","Authentication/SignIn.jsx"],"sourcesContent":["import axiosClient from \"./axiosClient\";\n\nconst CartAPI = {\n  getCarts: (query, token) => {\n    const url = `/carts/fetch${query}`;\n\n    return axiosClient.get(url, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  },\n\n  postAddToCart: (query, token) => {\n    const url = `/carts/add${query}`;\n    console.log(url);\n    return axiosClient.post(\n      url,\n      {},\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n  },\n\n  deleteToCart: (query, token) => {\n    const url = `/carts/delete${query}`;\n    return axiosClient.post(\n      url,\n      {},\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n  },\n\n  putToCart: (query, token) => {\n    const url = `/carts/update${query}`;\n    return axiosClient.post(\n      url,\n      {},\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n  },\n};\n\nexport default CartAPI;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport UserAPI from \"../API/UserAPI\";\nimport { addSession } from \"../Redux/Action/ActionSession\";\nimport \"./Auth.css\";\nimport queryString from \"query-string\";\nimport CartAPI from \"../API/CartAPI\";\n\nfunction SignIn(props) {\n  //listCart được lấy từ redux\n  const listCart = useSelector((state) => state.Cart.listCart);\n\n  const [email, setEmail] = useState(\"\");\n\n  const [password, setPassword] = useState(\"\");\n\n  const [user, setUser] = useState([]);\n\n  const [errorEmail, setErrorEmail] = useState(false);\n  const [emailRegex, setEmailRegex] = useState(false);\n  const [errorPassword, setErrorPassword] = useState(false);\n\n  const [resMessage, setResMessage] = useState(\"\");\n\n  const [redirect, setRedirect] = useState(false);\n\n  const [checkPush, setCheckPush] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const onChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const onChangePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (!email) {\n      setErrorEmail(true);\n      return;\n    } else {\n      if (!password) {\n        setErrorEmail(false);\n        setErrorPassword(true);\n        return;\n      } else {\n        setErrorPassword(false);\n\n        if (!validateEmail(email)) {\n          setEmailRegex(true);\n          return;\n        } else {\n          setEmailRegex(false);\n\n          const fetchLogin = async () => {\n            const params = {\n              email: email,\n              password: password,\n            };\n\n            const query = \"?\" + queryString.stringify(params);\n\n            const response = await UserAPI.postLogin(query);\n            console.log(response);\n\n            if (response.statusCode === 200) {\n              localStorage.setItem(\"token\", response.token);\n              localStorage.setItem(\"id_user\", response.userId);\n              const timeRemaining = 1000 * 60 * 60 * 3;\n              const expiryDate = new Date(new Date().getTime() + timeRemaining);\n              localStorage.setItem(\"expiryDate\", expiryDate.toISOString());\n              const action = addSession(localStorage.getItem(\"id_user\"));\n              dispatch(action);\n              setRedirect(true);\n            }\n            if (response.statusCode === 401 || response.statusCode === 422) {\n              setResMessage(response.message);\n            }\n          };\n          fetchLogin();\n        }\n      }\n    }\n  };\n\n  //Hàm này dùng để đưa hết tất cả carts vào API của user\n  // useEffect(() => {\n  // \tconst fetchData = async () => {\n  // \t\t//Lần đầu sẽ không thực hiện insert được vì addCart = ''\n  // \t\tif (checkPush === true) {\n  // \t\t\tfor (let i = 0; i < listCart.length; i++) {\n  // \t\t\t\t//Nó sẽ lấy idUser và idProduct và count cần thêm để gửi lên server\n  // \t\t\t\tconst params = {\n  // \t\t\t\t\tidUser: localStorage.getItem('id_user'),\n  // \t\t\t\t\tidProduct: listCart[i].idProduct,\n  // \t\t\t\t\tcount: listCart[i].count,\n  // \t\t\t\t};\n\n  // \t\t\t\tconst query = '?' + queryString.stringify(params);\n\n  // \t\t\t\tconst response = await CartAPI.postAddToCart(query);\n  // \t\t\t\tconsole.log(response);\n  // \t\t\t}\n\n  // \t\t\tsetRedirect(true);\n  // \t\t}\n  // \t};\n\n  // \tfetchData();\n  // }, [checkPush]);\n\n  function validateEmail(email) {\n    const re =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n\n  return (\n    <div className=\"limiter\">\n      <div className=\"container-login100\">\n        <div className=\"wrap-login100 p-l-55 p-r-55 p-t-65 p-b-50\">\n          <span className=\"login100-form-title p-b-33\">Đăng Nhập</span>\n\n          <div className=\"d-flex justify-content-center pb-5\">\n            {resMessage && <span className=\"text-danger\">* {resMessage}</span>}\n            {emailRegex && (\n              <span className=\"text-danger\">* Email Không Đúng Định Dạng</span>\n            )}\n            {errorEmail && (\n              <span className=\"text-danger\">* Hãy Nhập E-mail</span>\n            )}\n            {errorPassword && (\n              <span className=\"text-danger\">* Hãy Nhập Mật Khẩu</span>\n            )}\n          </div>\n\n          <div className=\"wrap-input100 validate-input\">\n            <input\n              className=\"input100\"\n              type=\"text\"\n              placeholder=\"E-mail\"\n              value={email}\n              onChange={onChangeEmail}\n            />\n          </div>\n\n          <div className=\"wrap-input100 rs1 validate-input\">\n            <input\n              className=\"input100\"\n              type=\"password\"\n              placeholder=\"Mật Khẩu\"\n              value={password}\n              onChange={onChangePassword}\n            />\n          </div>\n\n          <div className=\"container-login100-form-btn m-t-20\">\n            {redirect && <Redirect to={`/`} />}\n            <button className=\"login100-form-btn\" onClick={onSubmit}>\n              Đăng Nhập\n            </button>\n          </div>\n\n          <div className=\"text-center p-t-45 p-b-4\">\n            <span className=\"txt1\">Bạn Chưa Có Tài Khoản ?</span>\n            &nbsp;\n            <Link to=\"/signup\" className=\"txt2 hov1\">\n              Đăng Ký\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SignIn;\n"],"names":["CartAPI","getCarts","query","token","url","concat","axiosClient","headers","Authorization","postAddToCart","console","log","deleteToCart","putToCart","props","useSelector","state","Cart","listCart","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","_useState7","_useState8","errorEmail","setErrorEmail","_useState9","_useState10","emailRegex","setEmailRegex","_useState11","_useState12","errorPassword","setErrorPassword","_useState13","_useState14","resMessage","setResMessage","_useState15","_useState16","redirect","setRedirect","_useState17","_useState18","dispatch","useDispatch","_jsx","className","children","_jsxs","type","placeholder","value","onChange","e","target","Redirect","to","onClick","preventDefault","test","String","toLowerCase","validateEmail","fetchLogin","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","response","expiryDate","action","wrap","_context","prev","next","queryString","UserAPI","sent","statusCode","localStorage","setItem","userId","Date","getTime","toISOString","addSession","getItem","message","stop","apply","arguments","Link"],"sourceRoot":""}